import java.time.LocalDate;
import java.time.Period;
import java.util.regex.Pattern;

import org.springframework.stereotype.Component;
import org.springframework.validation.Errors;
import org.springframework.validation.ValidationUtils;
import org.springframework.validation.Validator;

@Component
public class UserValidator implements Validator {
    
    private static final Pattern USERNAME_PATTERN = Pattern.compile("^[a-zA-Z]+$");
    private static final Pattern PASSWORD_PATTERN = Pattern.compile("^(?=.*[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?])(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z]).{8,}$");
    
    @Override
    public boolean supports(Class<?> clazz) {
        return User.class.equals(clazz);
    }

    @Override
    public void validate(Object target, Errors errors) {
        User user = (User) target;
        
        ValidationUtils.rejectIfEmptyOrWhitespace(errors, "username", "NotEmpty");
        if (!USERNAME_PATTERN.matcher(user.getUsername()).matches()) {
            errors.rejectValue("username", "InvalidUsername");
        }
        
        ValidationUtils.rejectIfEmptyOrWhitespace(errors, "password", "NotEmpty");
        if (!PASSWORD_PATTERN.matcher(user.getPassword()).matches()) {
            errors.rejectValue("password", "InvalidPassword");
        }
        
        ValidationUtils.rejectIfEmptyOrWhitespace(errors, "gender", "NotEmpty");
        
        if (user.getHobbies() == null || user.getHobbies().size() < 2) {
            errors.rejectValue("hobbies", "InvalidHobbies");
        }
        
        if (user.getAge() != null && user.getAge() < 18) {
            errors.rejectValue("age", "InvalidAge");
        }
        
        if (user.getDateOfBirth() != null && user.getDateOfBirth().isAfter(LocalDate.now())) {
            errors.rejectValue("dateOfBirth", "InvalidDateOfBirth");
        }
    }
}






import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

@RestController
@Validated
public class UserController {
    
    @Autowired
    private UserValidator userValidator;

    @PostMapping("/register")
    public String registerUser(@Valid @RequestBody User user, BindingResult bindingResult) {
        if (bindingResult.hasErrors()) {
            return bindingResult.getAllErrors().toString();
        }
        // code to save the user
        return "User registered successfully!";
    }
}
