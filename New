Create an application in which an employee can apply for leaves. There are three kinds of leaves available:
Annual Leave - 10
Sick Leave - 10
Examination leave - 5 

 

The employee can apply for leave after logging. When the user applies for any kind of leave, 
it checks for whether those number of leaves are available or not. If yes, only then the employee
can apply for leave otherwise an error message is displayed. 


























package review;

public class Customer{

    private String Name;
    private int age;
    private String id;

    public String getName() {
        return Name;
    }

    public void setName(String name) {
        Name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public Customer(String name, int age, String id) {
        Name = name;
        this.age = age;
        this.id = id;
    }

    @Override
    public String toString() {
        return "Customer{" +
                "Name='" + Name + '\'' +
                ", age=" + age +
                ", id='" + id + '\'' +
                '}';
    }
}





package review;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class TestMain {
    public static void main(String[] args) {
        ArrayList<Customer> cus = new ArrayList<>();

        cus.add(new Customer("Harsh", 22, "101"));
        cus.add(new Customer("sourav", 24, "102"));
        cus.add(new Customer("Amar", 24, "102"));
        cus.add(new Customer("puja", 19, "105"));
        cus.add(new Customer("Nalin", 25, "106"));
        cus.add(new Customer("Aakash", 25, "109"));

        Comparator<Customer> ageNameComparator = Comparator.comparingInt(Customer::getAge)
                .thenComparing(Customer::getName);
        Collections.sort(cus, ageNameComparator);
        System.out.println(cus);
    }
}






















package review;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class TestMain {
    public static void main(String[] args) {
        ArrayList<Customer> cus = new ArrayList<>();

        cus.add(new Customer("Harsh", 22, "101"));
        cus.add(new Customer("sourav", 24, "102"));
        cus.add(new Customer("Amar", 24, "102"));
        cus.add(new Customer("puja", 19, "105"));
        cus.add(new Customer("Nalin", 25, "106"));
        cus.add(new Customer("Aakash", 25, "109"));

        Comparator<Customer> customerComparator = new Comparator<Customer>() {
            @Override
            public int compare(Customer c1, Customer c2) {
                int ageComp = Integer.compare(c1.getAge(), c2.getAge());
                if (ageComp != 0) {
                    return ageComp;
                }
                return c1.getName().compareTo(c2.getName());
            }
        };

        Collections.sort(cus, customerComparator);
        System.out.println(cus);
    }
}



age review;

public class Customer{

    private String Name;
    private int age;
    private String id;

    public String getName() {
        return Name;
    }

    public void setName(String name) {
        Name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public Customer(String name, int age, String id) {
        Name = name;
        this.age = age;
        this.id = id;
    }

    @Override
    public String toString() {
        return "Customer{" +
                "Name='" + Name + '\'' +
                ", age=" + age +
                ", id='" + id + '\'' +
                '}';
    }
}



package review;

import java.util.Comparator;

    public class NameComparator implements Comparator<Customer> {

        @Override
        public int compare(Customer o1, Customer o2) {

            return o1.getName().compareTo(o2.getName());
        }
    }
    
    
    
    package review;

import java.util.Comparator;

public class AgeComparator implements Comparator<Customer> {

    @Override
    public int compare(Customer o1, Customer o2) {
        return o1.getAge()- o2.getAge();
    }
}


package review;

import java.util.ArrayList;
import java.util.Collections;

public class TestMain {
    public static void main(String[] args) {
        ArrayList<Customer> cus = new ArrayList<>();

        cus.add(new Customer("Harsh", 22, "101"));
        cus.add(new Customer("sourav", 24, "102"));
        cus.add(new Customer("Amar", 24, "102"));
        cus.add(new Customer("puja", 19, "105"));
        cus.add(new Customer("Nalin", 25, "106"));
        cus.add(new Customer("Aakash",25,"109"));

        Collections.sort(cus,new AgeComparator());
        System.out.println(cus);
        Collections.sort(cus, new NameComparator());
//        Collections.sort(cus);
        System.out.println(cus);
    }
}



package review;

import java.util.ArrayList;
import java.util.Collections;

public class TestMain {
    public static void main(String[] args) {
        ArrayList<Customer> cus = new ArrayList<>();

        cus.add(new Customer("Harsh", 22, "101"));
        cus.add(new Customer("sourav", 24, "102"));
        cus.add(new Customer("Amar", 24, "102"));
        cus.add(new Customer("puja", 19, "105"));
        cus.add(new Customer("Nalin", 25, "106"));
        cus.add(new Customer("Aakash", 25, "109"));

        Comparator<Customer> ageNameComparator = Comparator.comparingInt(Customer::getAge)
                .thenComparing(Customer::getName);

        Collections.sort(cus, ageNameComparator);
        System.out.println(cus);
    }
}


change in the test main so that first it compare the object with the age and then age same then compare it with name
