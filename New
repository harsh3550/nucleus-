A Life Insurance Company is selling multiple insurance policies.

 

Each policy type will have the following information.

 

- Scheme number, 
- Policy name (Ex. Jeevan Mitra, Jeevan Anurag, Jeevan Vishwas etc)
- Policy type (Term, Money back)
- Maximum of number of years, 
- Premium rate per year per lakh, 
- Maximum sum assured (Ex. 10 Lakh, 20 Lakh etc.)

 

 
Customer can take any type of policy available. Customer needs to provide the following personal information for registration.

 

- Customer name, age, gender, address and phone number.

 


Customer needs to specify the following to take a policy.

 

- Policy name that he/she interested in, 
- Sum Assured that he/she needs, 
- No. of years that he/she wants to be insured, 
- premium payment cycle (monthly/quarterly/annual)

 

 
System validates that the sum assured and no of years given by the customer 
does not exceed the limits defined. Also, the system generates the policy number and 
calculates the premium based on the premium rate defined in the scheme. 
And it assigns the premium to the policy number based on the premium payment cycle.

 

For Example:

 

If Jeevan Mitra has a premium rate of Rs.500 per year per lakh and customer takes Jeevan Mitra 
with sum assured of Rs.2,00,000 and with quarterly payment, the following will be the calculated
premium.

 

Premium/year = Sum Assured*premium rate/1,00,000 = Rs.1000

 

Premium/quarter = Rs.1000/4 = Rs.250

 

 
Write a code to perform the following operations:

 

- Add a policy scheme
- View all policy schemes available.
- Add customer
- Assign policy to Customer
- View all policies for the given customer
- View all policies

 


Functional Requirements from the application:
- Proper Modularity 
- Proper Naming Convention
- Proper Inheritance and Composition
- Use of correct Collection 





import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

enum PolicyType {
    TERM, MONEY_BACK
}

class PolicyScheme {
    private int schemeNumber;
    private String policyName;
    private PolicyType policyType;
    private int maxYears;
    private double premiumRatePerLakh;
    private int maxSumAssured;

    public PolicyScheme(int schemeNumber, String policyName, PolicyType policyType,
                        int maxYears, double premiumRatePerLakh, int maxSumAssured) {
        this.schemeNumber = schemeNumber;
        this.policyName = policyName;
        this.policyType = policyType;
        this.maxYears = maxYears;
        this.premiumRatePerLakh = premiumRatePerLakh;
        this.maxSumAssured = maxSumAssured;
    }

    public int getSchemeNumber() {
        return schemeNumber;
    }

    public String getPolicyName() {
        return policyName;
    }

    public PolicyType getPolicyType() {
        return policyType;
    }

    public int getMaxYears() {
        return maxYears;
    }

    public double getPremiumRatePerLakh() {
        return premiumRatePerLakh;
    }

    public int getMaxSumAssured() {
        return maxSumAssured;
    }
}

class Customer {
    private String name;
    private int age;
    private String gender;
    private String address;
    private String phone;

    public Customer(String name, int age, String gender, String address, String phone) {
        this.name = name;
        this.age = age;
        this.gender = gender;
        this.address = address;
        this.phone = phone;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    public String getGender() {
        return gender;
    }

    public String getAddress() {
        return address;
    }

    public String getPhone() {
        return phone;
    }
}

class Policy {
    private String policyNumber;
    private Customer customer;
    private PolicyScheme policyScheme;
    private int sumAssured;
    private int years;
    private String paymentCycle;
    private double premium;

    public Policy(String policyNumber, Customer customer, PolicyScheme policyScheme,
                  int sumAssured, int years, String paymentCycle, double premium) {
        this.policyNumber = policyNumber;
        this.customer = customer;
        this.policyScheme = policyScheme;
        this.sumAssured = sumAssured;
        this.years = years;
        this.paymentCycle = paymentCycle;
        this.premium = premium;
    }

    public String getPolicyNumber() {
        return policyNumber;
    }

    public Customer getCustomer() {
        return customer;
    }

    public PolicyScheme getPolicyScheme() {
        return policyScheme;
    }

    public int getSumAssured() {
        return sumAssured;
    }

    public int getYears() {
        return years;
    }

    public String getPaymentCycle() {
        return paymentCycle;
    }

    public double getPremium() {
        return premium;
    }
}

class PolicyManagementSystem {
    private Map<Integer, PolicyScheme> policySchemes;
    private List<Customer> customers;
    private List<Policy> policies;

    public PolicyManagementSystem() {
        policySchemes = new HashMap<>();
        customers = new ArrayList<>();
        policies = new ArrayList<>();
    }

    public void addPolicyScheme(PolicyScheme policyScheme) {
        policySchemes.put(policyScheme.getSchemeNumber(), policyScheme);
    }

    public void viewAllPolicySchemes() {





In this code, we have three classes - Customer, Policy, and PolicyManagementSystem. Customer class represents the customers of the insurance company. Policy class represents the policies that the company issues to its customers. PolicyManagementSystem class is the main class that manages the policies and customers of the company.

The PolicyManagementSystem class has three lists - policySchemes, customers, and policies. policySchemes list contains all the policy schemes that the company offers. customers list contains all the customers of the company. policies list contains all the policies issued by the company.

The PolicyManagementSystem class has several methods to add policy schemes and customers, view all policy schemes




Send a message.










Create an application in which an employee can apply for leaves. There are three kinds of leaves available:
Annual Leave - 10
Sick Leave - 10
Examination leave - 5 

 

The employee can apply for leave after logging. When the user applies for any kind of leave, 
it checks for whether those number of leaves are available or not. If yes, only then the employee
can apply for leave otherwise an error message is displayed. 



import java.util.Scanner;

public class LeaveApplication {
    private int annualLeave;
    private int sickLeave;
    private int examLeave;

    public LeaveApplication() {
        this.annualLeave = 10;
        this.sickLeave = 10;
        this.examLeave = 5;
    }

    public void applyLeave(String leaveType, int noOfDays) {
        boolean isLeaveApproved = false;

        switch(leaveType) {
            case "Annual":
                if (noOfDays <= annualLeave) {
                    annualLeave -= noOfDays;
                    isLeaveApproved = true;
                }
                break;
            case "Sick":
                if (noOfDays <= sickLeave) {
                    sickLeave -= noOfDays;
                    isLeaveApproved = true;
                }
                break;
            case "Exam":
                if (noOfDays <= examLeave) {
                    examLeave -= noOfDays;
                    isLeaveApproved = true;
                }
                break;
            default:
                System.out.println("Invalid leave type. Please select either Annual, Sick or Exam leave.");
        }

        if (isLeaveApproved) {
            System.out.println("Your " + leaveType + " leave application for " + noOfDays + " day(s) has been approved.");
            System.out.println("Remaining " + leaveType + " leave balance: " + getLeaveBalance(leaveType));
        } else {
            System.out.println("Your " + leaveType + " leave application for " + noOfDays + " day(s) has been rejected due to insufficient leave balance.");
            System.out.println("Remaining " + leaveType + " leave balance: " + getLeaveBalance(leaveType));
        }
    }

    public int getLeaveBalance(String leaveType) {
        switch(leaveType) {
            case "Annual":
                return annualLeave;
            case "Sick":
                return sickLeave;
            case "Exam":
                return examLeave;
            default:
                System.out.println("Invalid leave type. Please select either Annual, Sick or Exam leave.");
                return 0;
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        LeaveApplication leaveApplication = new LeaveApplication();

        System.out.println("Welcome to the leave application portal.");

        while(true) {
            System.out.println("Please select the type of leave you want to apply for (Annual, Sick, Exam) or enter 'exit' to quit:");
            String leaveType = scanner.nextLine();

            if (leaveType.equals("exit")) {
                break;
            }

            System.out.println("Please enter the number of days you want to apply for:");
            int noOfDays = scanner.nextInt();
            scanner.nextLine();

            leaveApplication.applyLeave(leaveType, noOfDays);
        }
    }
}



import java.util.Scanner;

public class LeaveApplication {
    // Define the leave limits
    private static final int ANNUAL_LEAVE_LIMIT = 10;
    private static final int SICK_LEAVE_LIMIT = 10;
    private static final int EXAMINATION_LEAVE_LIMIT = 5;

    // Define a static variable to hold the available leaves for each type
    private static int availableAnnualLeaves = ANNUAL_LEAVE_LIMIT;
    private static int availableSickLeaves = SICK_LEAVE_LIMIT;
    private static int availableExamLeaves = EXAMINATION_LEAVE_LIMIT;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter your name: ");
        String name = scanner.nextLine();
        System.out.println("Welcome, " + name);

        // Allow the employee to apply for leave until they choose to exit
        while (true) {
            System.out.println("\nSelect leave type:");
            System.out.println("1. Annual Leave");
            System.out.println("2. Sick Leave");
            System.out.println("3. Examination Leave");
            System.out.println("4. Exit");

            int choice = scanner.nextInt();
            switch (choice) {
                case 1:
                    applyLeave("Annual Leave", availableAnnualLeaves, scanner);
                    break;
                case 2:
                    applyLeave("Sick Leave", availableSickLeaves, scanner);
                    break;
                case 3:
                    applyLeave("Examination Leave", availableExamLeaves, scanner);
                    break;
                case 4:
                    System.out.println("Goodbye, " + name);
                    System.exit(0);
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }

    private static void applyLeave(String leaveType, int availableLeaves, Scanner scanner) {
        System.out.println("\nApplying for " + leaveType);
        System.out.print("Enter the number of days: ");
        int days = scanner.nextInt();
        if (days <= availableLeaves) {
            switch (leaveType) {
                case "Annual Leave":
                    availableAnnualLeaves -= days;
                    break;
                case "Sick Leave":
                    availableSickLeaves -= days;
                    break;
                case "Examination Leave":
                    availableExamLeaves -= days;
                    break;
            }
            System.out.println(days + " days of " + leaveType + " approved.");
            System.out.println("Available " + leaveType + ": " + availableLeaves);
        } else {
            System.out.println("Insufficient " + leaveType + ". Please try again.");
        }
    }
}


public void addCustomer(Customer customer) {
    customers.add(customer);
}

public void viewAllCustomers() {
    for (Customer customer : customers) {
        System.out.println(customer.getName() + " - " + customer.getPhone());
    }
}

public void issuePolicy(Customer customer, PolicyScheme policyScheme, int sumAssured,
                        int years, String paymentCycle, double premium) {
    String policyNumber = generatePolicyNumber();
    Policy policy = new Policy(policyNumber, customer, policyScheme, sumAssured,
            years, paymentCycle, premium);
    policies.add(policy);
    System.out.println("Policy issued with policy number: " + policyNumber);
}

private String generatePolicyNumber() {
    Random random = new Random();
    return "POL-" + random.nextInt(10000);
}

public void viewAllPolicies() {
    for (Policy policy : policies) {
        System.out.println("Policy Number: " + policy.getPolicyNumber());
        System.out.println("Customer Name: " + policy.getCustomer().getName());
        System.out.println("Policy Scheme: " + policy.getPolicyScheme().getSchemeName());
        System.out.println("Sum Assured: " + policy.getSumAssured());
        System.out.println("Years: " + policy.getYears());
        System.out.println("Payment Cycle: " + policy.getPaymentCycle());
        System.out.println("Premium: " + policy.getPremium());
        System.out.println("--------------------------------------");
    }
}

public List<Policy> getPoliciesForCustomer(Customer customer) {
    List<Policy> policiesForCustomer = new ArrayList<>();
    for (Policy policy : policies) {
        if (policy.getCustomer().equals(customer)) {
            policiesForCustomer.add(policy);
        }
    }
    return policiesForCustomer;
}

public double calculatePremium(PolicyScheme policyScheme, int sumAssured, int years) {
    double premium = policyScheme.getPremiumRate() * sumAssured / 1000 * years;
    if (policyScheme.isBonusApplicable()) {
        premium += premium * policyScheme.getBonusRate() / 100;
    }
    return premium;
}


}

class PolicyScheme {
private int schemeNumber;
private String schemeName;
private double premiumRate;
private boolean bonusApplicable;
private double bonusRate;

csharp


public PolicyScheme(int schemeNumber, String schemeName, double premiumRate,
                    boolean bonusApplicable, double bonusRate) {
    this.schemeNumber = schemeNumber;
    this.schemeName = schemeName;
    this.premiumRate = premiumRate;
    this.bonusApplicable = bonusApplicable;
    this.bonusRate = bonusRate;
}

public int getSchemeNumber() {
    return schemeNumber;
}

public String getSchemeName() {
    return schemeName;
}

public double getPremiumRate() {
    return premiumRate;
}

public boolean isBonusApplicable() {
    return bonusApplicable;
}

public double getBonusRate() {
    return bonusRate;
}


















package review;

public class Customer{

    private String Name;
    private int age;
    private String id;

    public String getName() {
        return Name;
    }

    public void setName(String name) {
        Name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public Customer(String name, int age, String id) {
        Name = name;
        this.age = age;
        this.id = id;
    }

    @Override
    public String toString() {
        return "Customer{" +
                "Name='" + Name + '\'' +
                ", age=" + age +
                ", id='" + id + '\'' +
                '}';
    }
}





package review;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class TestMain {
    public static void main(String[] args) {
        ArrayList<Customer> cus = new ArrayList<>();

        cus.add(new Customer("Harsh", 22, "101"));
        cus.add(new Customer("sourav", 24, "102"));
        cus.add(new Customer("Amar", 24, "102"));
        cus.add(new Customer("puja", 19, "105"));
        cus.add(new Customer("Nalin", 25, "106"));
        cus.add(new Customer("Aakash", 25, "109"));

        Comparator<Customer> ageNameComparator = Comparator.comparingInt(Customer::getAge)
                .thenComparing(Customer::getName);
        Collections.sort(cus, ageNameComparator);
        System.out.println(cus);
    }
}






















package review;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class TestMain {
    public static void main(String[] args) {
        ArrayList<Customer> cus = new ArrayList<>();

        cus.add(new Customer("Harsh", 22, "101"));
        cus.add(new Customer("sourav", 24, "102"));
        cus.add(new Customer("Amar", 24, "102"));
        cus.add(new Customer("puja", 19, "105"));
        cus.add(new Customer("Nalin", 25, "106"));
        cus.add(new Customer("Aakash", 25, "109"));

        Comparator<Customer> customerComparator = new Comparator<Customer>() {
            @Override
            public int compare(Customer c1, Customer c2) {
                int ageComp = Integer.compare(c1.getAge(), c2.getAge());
                if (ageComp != 0) {
                    return ageComp;
                }
                return c1.getName().compareTo(c2.getName());
            }
        };

        Collections.sort(cus, customerComparator);
        System.out.println(cus);
    }
}



age review;

public class Customer{

    private String Name;
    private int age;
    private String id;

    public String getName() {
        return Name;
    }

    public void setName(String name) {
        Name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public Customer(String name, int age, String id) {
        Name = name;
        this.age = age;
        this.id = id;
    }

    @Override
    public String toString() {
        return "Customer{" +
                "Name='" + Name + '\'' +
                ", age=" + age +
                ", id='" + id + '\'' +
                '}';
    }
}



package review;

import java.util.Comparator;

    public class NameComparator implements Comparator<Customer> {

        @Override
        public int compare(Customer o1, Customer o2) {

            return o1.getName().compareTo(o2.getName());
        }
    }
    
    
    
    package review;

import java.util.Comparator;

public class AgeComparator implements Comparator<Customer> {

    @Override
    public int compare(Customer o1, Customer o2) {
        return o1.getAge()- o2.getAge();
    }
}


package review;

import java.util.ArrayList;
import java.util.Collections;

public class TestMain {
    public static void main(String[] args) {
        ArrayList<Customer> cus = new ArrayList<>();

        cus.add(new Customer("Harsh", 22, "101"));
        cus.add(new Customer("sourav", 24, "102"));
        cus.add(new Customer("Amar", 24, "102"));
        cus.add(new Customer("puja", 19, "105"));
        cus.add(new Customer("Nalin", 25, "106"));
        cus.add(new Customer("Aakash",25,"109"));

        Collections.sort(cus,new AgeComparator());
        System.out.println(cus);
        Collections.sort(cus, new NameComparator());
//        Collections.sort(cus);
        System.out.println(cus);
    }
}



package review;

import java.util.ArrayList;
import java.util.Collections;

public class TestMain {
    public static void main(String[] args) {
        ArrayList<Customer> cus = new ArrayList<>();

        cus.add(new Customer("Harsh", 22, "101"));
        cus.add(new Customer("sourav", 24, "102"));
        cus.add(new Customer("Amar", 24, "102"));
        cus.add(new Customer("puja", 19, "105"));
        cus.add(new Customer("Nalin", 25, "106"));
        cus.add(new Customer("Aakash", 25, "109"));

        Comparator<Customer> ageNameComparator = Comparator.comparingInt(Customer::getAge)
                .thenComparing(Customer::getName);

        Collections.sort(cus, ageNameComparator);
        System.out.println(cus);
    }
}


change in the test main so that first it compare the object with the age and then age same then compare it with name
