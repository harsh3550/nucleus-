Forgot to mark attendance.


User
Mail to manager for forgot to mark attendance at exit time at computer system 

ChatGPT
Subject: Forgot to Mark Attendance at Exit Time in the Computer System

Dear [Manager's Name],

I am writing to inform you that I forgot to mark my attendance at the exit time in the computer system yesterday. I apologize for any inconvenience or confusion that this may have caused.

I understand the importance of accurate attendance records for the smooth functioning of our organization. I take full responsibility for this oversight and assure you that it was not intentional.

To rectify the situation, I have marked my attendance for yesterday's exit time as soon as I realized my mistake. I have also taken measures to ensure that this does not happen again in the future.

Once again, I apologize for any inconvenience caused and thank you for your understanding. Please let me know if there is anything else that I can do to make up for this mistake.

Thank you.

Sincerely,
[Your Name]




Develop a Spring Core Application to perform the following actions on the Customer object.
a. boolean registerCustomer(Customer c)
The condition to register a customeris that the age of the customer must be greater 
than 21. 
b. boolean updateCustomer(Customer c)
c. boolean deleteCustomer(int customerId)
d. Customer getCustomer(int customerId)throws CustomerNotFoundException
By giving the Customer Id, the customer is searched in database. If found returns the 
object otherwise returns CustomerNotFoundException
e. List<Customer> getAllCustomers()
f. List<Customer> getCustomersByName(String custName)


Important Points:
1. The user input will be accepted in the Presentation Layer, and all the methods mentioned 
above are present in Service Layer. 
2. Use the Customer table already existing in the database created during SQL-Day1. The 
application must be properly layered with the Presentation layer, Service layer and the 
database layer. Use JDBC to connect with Database. 
3. Use Java Configuration and ComponentScan, Autowired, Component, Service, Repository
annotations to complete the application






To develop a Spring Core Application to perform the above mentioned actions on the Customer object, we need to follow the following steps:

Step 1: Create a database named "customerdb" and create a table named "Customer" in it, with the following columns:

id (int, primary key, auto increment)
name (varchar)
age (int)
Step 2: Add the required dependencies in the pom.xml file. Here are the dependencies required for this application:

spring-core
spring-context
spring-jdbc
mysql-connector-java
Step 3: Create a Customer model class with the following properties:

id (int)
name (String)
age (int)
Step 4: Create an interface named CustomerDAO with the following methods:

boolean registerCustomer(Customer c)
boolean updateCustomer(Customer c)
boolean deleteCustomer(int customerId)
Customer getCustomer(int customerId) throws CustomerNotFoundException
List<Customer> getAllCustomers()
List<Customer> getCustomersByName(String custName)
Step 5: Create a class named CustomerDAOImpl that implements the CustomerDAO interface. Here, we will use JDBC to connect with the database and perform database operations.

Step 6: Create a Service layer with the name CustomerService with the following methods:

boolean registerCustomer(Customer c)
boolean updateCustomer(Customer c)
boolean deleteCustomer(int customerId)
Customer getCustomer(int customerId) throws CustomerNotFoundException
List<Customer> getAllCustomers()
List<Customer> getCustomersByName(String custName)
Step 7: Create a class named CustomerServiceImpl that implements the CustomerService interface. Here, we will use the CustomerDAO object to perform the required database operations.

Step 8: Create a Presentation layer with the name CustomerController with the following methods:

void registerCustomer()
void updateCustomer()
void deleteCustomer()
void getCustomer()
void getAllCustomers()
void getCustomersByName()
Step 9: Create a class named CustomerControllerImpl that implements the CustomerController interface. Here, we will use the CustomerService object to perform the required operations.

Step 10: Use Java Configuration and ComponentScan, Autowired, Component, Service, Repository annotations to complete the application.

Here is the sample code for the above-mentioned steps:










package com.example.demo.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.example.demo.dao.CustomerDAO;
import com.example.demo.exception.CustomerNotFoundException;
import com.example.demo.model.Customer;

@Service
@Transactional
public class CustomerServiceImpl implements CustomerService {

    @Autowired
    private CustomerDAO customerDAO;

    @Override
    public boolean registerCustomer(Customer c) {
        if (c.getAge() > 21) {
            customerDAO.registerCustomer(c);
            return true;
        }
        return false;
    }

    @Override
    public boolean updateCustomer(Customer c) {
        customerDAO.updateCustomer(c);
        return true;
    }

    @Override
    public boolean deleteCustomer(int customerId) {
        customerDAO.deleteCustomer(customerId);
        return true;
    }

    @Override
    public Customer getCustomer(int customerId) throws CustomerNotFoundException {
        Customer customer = customerDAO.getCustomer(customerId);
        if (customer == null) {
            throw new CustomerNotFoundException("Customer not found with id : " + customerId);
        }
        return customer;
    }

    @Override
    public List<Customer> getAllCustomers() {
        return customerDAO.getAllCustomers();
    }

    @Override
    public List<Customer> getCustomersByName(String custName) {
        return customerDAO.getCustomersByName(custName);
    }

}
















package assignment16;

import java.io.*;

public class CreateFile {
        public static void main(String[] args) throws IOException {
            File file = new File("D:\\OneDrive\\OneDrive - nucleusonline\\java assignment\\harsh.txt");
            file.createNewFile();
            FileWriter writer = new FileWriter(file);
            writer.write("Hi this is Harsh");
            writer.flush();
            writer.close();
            try{
                FileOutputStream fout=new
                        FileOutputStream("D:\\OneDrive\\OneDrive - nucleusonline\\java assignment\\harsh.txt", true);
                String s ="\nHow are you people";
                byte b[]=s.getBytes();
                fout.write(b);
                fout.close();
                System.out.println("File OverWritten");
            }catch(Exception e){
                System.out.println(e);
            }
        }
    }






import java.io.*;

public class ModifyFile {
    public static void main(String[] args) {
        try {
            FileWriter writer = new FileWriter("D:\\OneDrive\\OneDrive - nucleusonline\\java assignment\\harsh.txt", true);
            writer.write("\nThis is a modified content.");
            writer.close();
            System.out.println("File modified successfully!");
        } catch (IOException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }
    }
}







import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class CharacterCounter {
    public static void main(String[] args) {
        if (args.length < 2) {
            System.out.println("Usage: java CharacterCounter <file_path> <character>");
            return;
        }
        
        String filePath = args[0];
        char characterToCount = args[1].charAt(0);
        int count = 0;
        
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            int c;
            while ((c = reader.read()) != -1) {
                if (c == characterToCount) {
                    count++;
                }
            }
        } catch (IOException e) {
            System.out.println("Error reading file: " + e.getMessage());
            return;
        }
        
        System.out.println("The character '" + characterToCount + "' appears " + count + " times in the file.");
    }
}




import java.io.*;
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;
import java.sql.*;

public class ExamServlet extends HttpServlet {

    private Connection con;
    private PreparedStatement stmt;
    private ResultSet rs;

    public void init() throws ServletException {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/test", "root", "password");
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession();
        String examStatus = (String)session.getAttribute("examStatus");
        int questionNo = 0;
        if (examStatus != null && examStatus.equals("incomplete")) {
            questionNo = (int)session.getAttribute("questionNo");
        } else {
            Random rand = new Random();
            List<Integer> questionIds = new ArrayList<>();
            try {
                stmt = con.prepareStatement("SELECT id FROM questions");
                rs = stmt.executeQuery();
                while (rs.next()) {
                    questionIds.add(rs.getInt("id"));
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            Collections.shuffle(questionIds);
            questionIds = questionIds.subList(0, 3);
            session.setAttribute("questionIds", questionIds);
        }
        int currentQuestionId = (int)session.getAttribute("questionIds").get(questionNo);
        try {
            stmt = con.prepareStatement("SELECT * FROM questions WHERE id=?");
            stmt.setInt(1, currentQuestionId);
            rs = stmt.executeQuery();
            if (rs.next()) {
                request.setAttribute("question", rs.getString("question"));
                request.setAttribute("option1", rs.getString("option1"));
                request.setAttribute("option2", rs.getString("option2"));
                request.setAttribute("option3", rs.getString("option3"));
                request.setAttribute("option4", rs.getString("option4"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        session.setAttribute("questionNo", questionNo);
        RequestDispatcher rd = request.getRequestDispatcher("exam.jsp");
        rd.forward(request, response);
    }

    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession();
        int questionNo = (int)session.getAttribute("questionNo");
        String answer = request.getParameter("answer");
        int currentQuestionId = (int)session.getAttribute("questionIds").get(questionNo);
        int score = (int)session.getAttribute("score");
        try {
            stmt = con.prepareStatement("SELECT answer FROM questions WHERE id=?");
            stmt.setInt(1, currentQuestionId);
            rs = stmt.executeQuery();
            if (rs.next()) {
                String correctAnswer = rs.getString("answer");
                if (answer.equals(correctAnswer)) {
                    score++;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        questionNo++;
        session.setAttribute("score", score);
        session.setAttribute("questionNo", questionNo);
        if (questionNo >= 3) {
            session.setAttribute("examStatus", "complete");
            try {
                stmt = con.prepareStatement("INSERT INTO scores (score) VALUES (?)");
                stmt.setInt(1, score);
                stmt.executeUpdate();
            } catch (SQLException e) {
                e.printStackTrace();
            }
            RequestDispatcher rd = request.getRequestDispatcher("result.jsp");
            rd.forward(request, response);
        } else {
            response.sendRedirect("exam");
        }
    }

    public void destroy() {
        try {
            if (rs != null) rs.close();
           

















<!DOCTYPE html>
<html>
<head>
	<title>EMI Calculator</title>
	<style>
		input[type="text"] {
			padding: 5px;
			margin: 10px;
			border: 1px solid #ccc;
			border-radius: 3px;
		}
		button {
			padding: 5px 10px;
			background-color: #4CAF50;
			color: #fff;
			border: none;
			border-radius: 3px;
			cursor: pointer;
		}
		#result {
			padding: 10px;
			margin: 10px;
			border: 1px solid #ccc;
			border-radius: 3px;
			font-size: 18px;
			font-weight: bold;
		}
	</style>
</head>
<body>
	<h1>EMI Calculator</h1>
	<label for="loan-type">Select Loan Type:</label>
	<select id="loan-type">
		<option value="home">Home Loan</option>
		<option value="car">Car Loan</option>
		<option value="personal">Personal Loan</option>
	</select>
	<br><br>
	<label for="loan-amount">Loan Amount:</label>
	<input type="text" id="loan-amount">
	<br>
	<label for="interest-rate">Interest Rate:</label>
	<input type="text" id="interest-rate">
	<br>
	<label for="loan-tenure">Loan Tenure (in months):</label>
	<input type="text" id="loan-tenure">
	<br><br>
	<button id="calculate">Calculate EMI</button>
	<div id="result"></div>
	<script>
		function calculateEMI(principal, interest, months) {
			// Convert interest rate from percentage to decimal
			interest = interest / 100 / 12;
  // Calculate monthly payment
		let x = Math.pow(1 + interest, months);
		let monthlyPayment = (principal * x * interest) / (x - 1);

		// Round to 2 decimal places
		monthlyPayment = monthlyPayment.toFixed(2);

		return monthlyPayment;
	}

	document.getElementById("calculate").addEventListener("click", function() {
		let principal = parseFloat(document.getElementById("loan-amount").value);
		let interest = parseFloat(document.getElementById("interest-rate").value);
		let months = parseFloat(document.getElementById("loan-tenure").value);

		let monthlyPayment = calculateEMI(principal, interest, months);

		document.getElementById("result").innerHTML = "EMI: " + monthlyPayment;
	});
</script

import java.util.*;

class Person {
    private String name;
    private int age;

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    public String toString() {
        return name + " (" + age + ")";
    }

    public static void main(String[] args) {
        List<Person> people = new ArrayList<>();
        people.add(new Person("Alice", 25));
        people.add(new Person("Bob", 30));
        people.add(new Person("Charlie", 20));
        people.add(new Person("David", 35));
        people.add(new Person("Emily", 28));

        // Sort by age using a comparator
        Collections.sort(people, Comparator.comparingInt(Person::getAge));

        System.out.println("Sorted by age:");
        for (Person p : people) {
            System.out.println(p);
        }

        // Sort by name using a comparator
        Collections.sort(people, Comparator.comparing(Person::getName));

        System.out.println("Sorted by name:");
        for (Person p : people) {
            System.out.println(p);
        }
    }
}

class PersonToStringConstructor {
    private String name;
    private int age;

    public PersonToStringConstructor(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public String toString() {
        return name + " (" + age + ")";
    }
}


