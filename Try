
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

class Employee {
    private int employeeId;
    private String employeeName;
    private int yearOfExperience;
    private List<String> technicalSkills;
    private LocalDate dateOfJoining;
    private Project allocatedProject;

    public Employee(int employeeId, String employeeName, int yearOfExperience, List<String> technicalSkills, LocalDate dateOfJoining) {
        this.employeeId = employeeId;
        this.employeeName = employeeName;
        this.yearOfExperience = yearOfExperience;
        this.technicalSkills = technicalSkills;
        this.dateOfJoining = dateOfJoining;
    }

    public int getEmployeeId() {
        return employeeId;
    }

    public String getEmployeeName() {
        return employeeName;
    }

    public int getYearOfExperience() {
        return yearOfExperience;
    }

    public List<String> getTechnicalSkills() {
        return technicalSkills;
    }

    public LocalDate getDateOfJoining() {
        return dateOfJoining;
    }

    public Project getAllocatedProject() {
        return allocatedProject;
    }

    public void setAllocatedProject(Project project) {
        allocatedProject = project;
    }
}

class ContractualEmployee extends Employee {
    public ContractualEmployee(int employeeId, String employeeName, int yearOfExperience, List<String> technicalSkills, LocalDate dateOfJoining) {
        super(employeeId, employeeName, yearOfExperience, technicalSkills, dateOfJoining);
    }
}

class PermanentEmployee extends Employee {
    public PermanentEmployee(int employeeId, String employeeName, int yearOfExperience, List<String> technicalSkills, LocalDate dateOfJoining) {
        super(employeeId, employeeName, yearOfExperience, technicalSkills, dateOfJoining);
    }
}

class Project {
    private String projectName;
    private LocalDate startDate;
    private LocalDate endDate;
    private int maxEmployees;
    private List<String> requiredSkills;
    private List<Employee> allocatedEmployees;

    public Project(String projectName, LocalDate startDate, LocalDate endDate, int maxEmployees, List<String> requiredSkills) {
        this.projectName = projectName;
        this.startDate = startDate;
        this.endDate = endDate;
        this.maxEmployees = maxEmployees;
        this.requiredSkills = requiredSkills;
        this.allocatedEmployees = new ArrayList<>();
    }

    public String getProjectName() {
        return projectName;
    }

    public LocalDate getStartDate() {
        return startDate;
    }

    public LocalDate getEndDate() {
        return endDate;
    }

    public int getMaxEmployees() {
        return maxEmployees;
    }

    public List<String> getRequiredSkills() {
        return requiredSkills;
    }

    public List<Employee> getAllocatedEmployees() {
        return allocatedEmployees;
    }

    public void allocateEmployee(Employee employee) {
        if (allocatedEmployees.size() < maxEmployees && employee.getAllocatedProject() == null && hasRequiredSkills(employee)) {
            allocatedEmployees.add(employee);
            employee.setAllocatedProject(this);
            System.out.println("Employee " + employee.getEmployeeName() + " has been allocated to Project " + projectName);
        } else {
            System.out.println("Allocation failed for Employee " + employee.getEmployeeName() + " to Project " + projectName);
        }
    }

    private boolean hasRequiredSkills(Employee employee) {
        int count = 0;
        for (String skill : requiredSkills) {
            if (employee.getTechnicalSkills().contains(skill)) {
                count++;
            }
        }
        return count >= 2;
    }
}

public class EmployeeProjectAllocationApp {
    public static void
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class EmployeeProjectAllocationApp {
    public static void main(String[] args) {
        // Create employees
        Employee employee1 = new PermanentEmployee(1, "John Doe", 5, Arrays.asList("Java", "SQL"), LocalDate.of(2018, 5, 10));
        Employee employee2 = new ContractualEmployee(2, "Jane Smith", 3, Arrays.asList("Python", "C++"), LocalDate.of(2020, 9, 15));
        Employee employee3 = new PermanentEmployee(3, "Michael Johnson", 7, Arrays.asList("Java", "JavaScript"), LocalDate.of(2015, 3, 25));
        Employee employee4 = new PermanentEmployee(4, "Emily Davis", 2, Arrays.asList("Python", "HTML"), LocalDate.of(2022, 1, 7));
        Employee employee5 = new ContractualEmployee(5, "David Wilson", 4, Arrays.asList("C++", "JavaScript"), LocalDate.of(2021, 8, 12));

        // Create projects
        Project project1 = new Project("Project A", LocalDate.of(2023, 7, 1), LocalDate.of(2023, 12, 31), 3, Arrays.asList("Java", "SQL"));
        Project project2 = new Project("Project B", LocalDate.of(2023, 7, 1), LocalDate.of(2023, 11, 30), 2, Arrays.asList("Python", "C++"));

        // Allocate employees to projects
        project1.allocateEmployee(employee1);
        project1.allocateEmployee(employee2);
        project1.allocateEmployee(employee3);
        project2.allocateEmployee(employee4);
        project2.allocateEmployee(employee5);

        // Print allocated employees for each project
        System.out.println("Allocated employees for Project " + project1.getProjectName() + ":");
        for (Employee employee : project1.getAllocatedEmployees()) {
            System.out.println("- " + employee.getEmployeeName());
        }

        System.out.println("\nAllocated employees for Project " + project2.getProjectName() + ":");
        for (Employee employee : project2.getAllocatedEmployees()) {
            System.out.println("- " + employee.getEmployeeName());
        }
    }
}





Create an Employee Project Allocation Application. The employee can be of two types - Contractual and Permanent.

Employee will have the below mentioned details:

1. Employee Id

2. Employee Name

3. Year of Experience

4. Technical Skills (Array of 5)

5. Date of Joining

The Project has the below mentioned details:

1. Project Name

2. Start Date

3. End Date

4. Maximum number of employees 5. Technical Skills required (array of 5)

You need to create an application where the employees can be allocated to a certain Project. The conditions which need to be fulfilled are:

1. One Employee can be allocated to only one Project.

2. The Employee must have a minimum of two skills required for that project. 3. A Project can have maximum 5 contractual employees and rest all must be Permanent

employees. 4. Once the maximum number of employees is reached, no more employees can be assigned to that Project.

5. The employee can be assigned to a Project only if that employee doesn't have any

Project allocated to him/her.

Provide proper Inheritance, Composition and Modularity in the code. Use appropriate Collections where necessary.



Order date Ship date
Tard at ship_qt
Status
01/01/200 01/01/200
200
200
Ontime
2
01/01/200 04/01/200
300
250
Late
150
01/01/200
Pendin g.
I INTERNATIONALS Lid also maintains master data of all the items and their quantity present in
neir stock in the ITEM table
Description
Column
Item id
Description
Unit price
Quantity on hand
Datatype | Numeric
Character
Numeric
Numeric
Width
20
Total quantity in stock
1) Identify the primary keys and foreign keys in the table above and the relationship between the tables. Also identify the integrity checks and referential integrity checks required to maintain the tables.
2) Create the tables with required integrity checks
3) Modify the Customer table and delete the FAX Column.
4) Modify the customer table and decrease the size of the Address column from 20 to 15. Is it possible to change. If not what is the possible reason for the same?
5) Display the item_id and the unit price of each item from the ITEM table, if the unit price is increased by 15 percent.
6) Display the item_id and QOH of each item, giving ITEM CODE and QUANTITY ON HAND as heading respectively from the ITEM table.
7) Display item_id, description and unit price of each item from the ITEM table, concatenating item_id and description in the following format:
MO Treen
Unit Price
ii. I-Fresh Soap 25
8) Display all data from CUSTOMER table in order of State column and within that on the basis of descending Company name from the CUSTOMER table.
9) Display all items whose unit price is more than 50.
10) Display all items whose unit price is from 50 to 100, and which have quantity on hand more than 500.
11) Display all customers' data whose company name starts with 'A'.
12) Display all the orders placed by a customer whose id is entered at runtime.
13) Display the details of order for the customer, whose customer name is entered at runtime. In the next statement display details of all the orders other than the customer name entered before.
14) Display the day on which order was placed. All the orders are ideally to be shipped within 3 days of order placement. Display the actual shipment date and the date 3 days after the order date.
15) Display the rust wastedate forsteurnberof orders olaced tr that contomer anty it that
2000 Dhanlay in Descending order
17) Given a customer name display the total amount of all the orders placed by that
18) Given an item Id, display who all customers have purchased that item before th mai
2022,
19) Display list of all orders who are late for more than 10 days
20 create a view to display the list of all orders where quantity ordered is greater than quantity shipopd, Diglay the difference also,
21) Wil sequence be same if i connect session and reconnect it later in oracle?
2 What is the difference between Single view and complex view
PLSQL
create a trigger which will update the Discount column value whenever a new row in inserted in Sales Order table. The calculation for discount column is:
if the quantity ordered is greater than 200, the discount is 15% the quantity ordered is less than 200, the discountis 10%
Create a trigger which will be executed whenever a new record is inserted in ITEM table. It must check for the value of Quantity_on_hand column. It must not be less than 100. If the value is less than 100, it throws an exception otherwise the record is inserted in table.
3. Create a function to calculate the final order amount for the orders placed by each customer. Use the function when displaying the records from customer table in the befow format.
Cust_id Customer_name Total orders placed total_order_amount
Create a procedure to take the item_id as input and print the total times the item has been purchased. If the item has never been purchased till now, throw 'No Data Found' Exception.
5. Create a procedure which prints the details of all the orders placed by all the customers in the below mentioned format:
Cust_name order_id total_items_in_order total_discount_availed total_quantity_placed total_quantity_shipped
6. Is PLSQL faster than SQL? If yes, give the reason.
7. Explain the difference between IN, OUT and INOUT parameters.
8. Show code of a cursor For loop.
9. Explain mutating table error.
10. What is the difference between ROLLBACK and ROLLBACK TO.




Develop a Spring Core Application to perform the following actions on the Customer object.
a. boolean registerCustomer(Customer c)
The condition to register a customeris that the age of the customer must be greater 
than 21. 
b. boolean updateCustomer(Customer c)
c. boolean deleteCustomer(int customerId)
d. Customer getCustomer(int customerId)throws CustomerNotFoundException
By giving the Customer Id, the customer is searched in database. If found returns the 
object otherwise returns CustomerNotFoundException
e. List<Customer> getAllCustomers()
f. List<Customer> getCustomersByName(String custName)


Important Points:
1. The user input will be accepted in the Presentation Layer, and all the methods mentioned 
above are present in Service Layer. 
2. Use the Customer table already existing in the database created during SQL-Day1. The 
application must be properly layered with the Presentation layer, Service layer and the 
database layer. Use JDBC to connect with Database. 
3. Use Java Configuration and ComponentScan, Autowired, Component, Service, Repository
annotations to complete the application






To develop a Spring Core Application to perform the above mentioned actions on the Customer object, we need to follow the following steps:

Step 1: Create a database named "customerdb" and create a table named "Customer" in it, with the following columns:

id (int, primary key, auto increment)
name (varchar)
age (int)
Step 2: Add the required dependencies in the pom.xml file. Here are the dependencies required for this application:

spring-core
spring-context
spring-jdbc
mysql-connector-java
Step 3: Create a Customer model class with the following properties:

id (int)
name (String)
age (int)
Step 4: Create an interface named CustomerDAO with the following methods:

boolean registerCustomer(Customer c)
boolean updateCustomer(Customer c)
boolean deleteCustomer(int customerId)
Customer getCustomer(int customerId) throws CustomerNotFoundException
List<Customer> getAllCustomers()
List<Customer> getCustomersByName(String custName)
Step 5: Create a class named CustomerDAOImpl that implements the CustomerDAO interface. Here, we will use JDBC to connect with the database and perform database operations.

Step 6: Create a Service layer with the name CustomerService with the following methods:

boolean registerCustomer(Customer c)
boolean updateCustomer(Customer c)
boolean deleteCustomer(int customerId)
Customer getCustomer(int customerId) throws CustomerNotFoundException
List<Customer> getAllCustomers()
List<Customer> getCustomersByName(String custName)
Step 7: Create a class named CustomerServiceImpl that implements the CustomerService interface. Here, we will use the CustomerDAO object to perform the required database operations.

Step 8: Create a Presentation layer with the name CustomerController with the following methods:

void registerCustomer()
void updateCustomer()
void deleteCustomer()
void getCustomer()
void getAllCustomers()
void getCustomersByName()
Step 9: Create a class named CustomerControllerImpl that implements the CustomerController interface. Here, we will use the CustomerService object to perform the required operations.

Step 10: Use Java Configuration and ComponentScan, Autowired, Component, Service, Repository annotations to complete the application.

Here is the sample code for the above-mentioned steps:










package com.example.demo.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.example.demo.dao.CustomerDAO;
import com.example.demo.exception.CustomerNotFoundException;
import com.example.demo.model.Customer;

@Service
@Transactional
public class CustomerServiceImpl implements CustomerService {

    @Autowired
    private CustomerDAO customerDAO;

    @Override
    public boolean registerCustomer(Customer c) {
        if (c.getAge() > 21) {
            customerDAO.registerCustomer(c);
            return true;
        }
        return false;
    }

    @Override
    public boolean updateCustomer(Customer c) {
        customerDAO.updateCustomer(c);
        return true;
    }

    @Override
    public boolean deleteCustomer(int customerId) {
        customerDAO.deleteCustomer(customerId);
        return true;
    }

    @Override
    public Customer getCustomer(int customerId) throws CustomerNotFoundException {
        Customer customer = customerDAO.getCustomer(customerId);
        if (customer == null) {
            throw new CustomerNotFoundException("Customer not found with id : " + customerId);
        }
        return customer;
    }

    @Override
    public List<Customer> getAllCustomers() {
        return customerDAO.getAllCustomers();
    }

    @Override
    public List<Customer> getCustomersByName(String custName) {
        return customerDAO.getCustomersByName(custName);
    }

}
















package assignment16;

import java.io.*;

public class CreateFile {
        public static void main(String[] args) throws IOException {
            File file = new File("D:\\OneDrive\\OneDrive - nucleusonline\\java assignment\\harsh.txt");
            file.createNewFile();
            FileWriter writer = new FileWriter(file);
            writer.write("Hi this is Harsh");
            writer.flush();
            writer.close();
            try{
                FileOutputStream fout=new
                        FileOutputStream("D:\\OneDrive\\OneDrive - nucleusonline\\java assignment\\harsh.txt", true);
                String s ="\nHow are you people";
                byte b[]=s.getBytes();
                fout.write(b);
                fout.close();
                System.out.println("File OverWritten");
            }catch(Exception e){
                System.out.println(e);
            }
        }
    }






import java.io.*;

public class ModifyFile {
    public static void main(String[] args) {
        try {
            FileWriter writer = new FileWriter("D:\\OneDrive\\OneDrive - nucleusonline\\java assignment\\harsh.txt", true);
            writer.write("\nThis is a modified content.");
            writer.close();
            System.out.println("File modified successfully!");
        } catch (IOException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }
    }
}







import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class CharacterCounter {
    public static void main(String[] args) {
        if (args.length < 2) {
            System.out.println("Usage: java CharacterCounter <file_path> <character>");
            return;
        }
        
        String filePath = args[0];
        char characterToCount = args[1].charAt(0);
        int count = 0;
        
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            int c;
            while ((c = reader.read()) != -1) {
                if (c == characterToCount) {
                    count++;
                }
            }
        } catch (IOException e) {
            System.out.println("Error reading file: " + e.getMessage());
            return;
        }
        
        System.out.println("The character '" + characterToCount + "' appears " + count + " times in the file.");
    }
}




import java.io.*;
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;
import java.sql.*;

public class ExamServlet extends HttpServlet {

    private Connection con;
    private PreparedStatement stmt;
    private ResultSet rs;

    public void init() throws ServletException {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/test", "root", "password");
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession();
        String examStatus = (String)session.getAttribute("examStatus");
        int questionNo = 0;
        if (examStatus != null && examStatus.equals("incomplete")) {
            questionNo = (int)session.getAttribute("questionNo");
        } else {
            Random rand = new Random();
            List<Integer> questionIds = new ArrayList<>();
            try {
                stmt = con.prepareStatement("SELECT id FROM questions");
                rs = stmt.executeQuery();
                while (rs.next()) {
                    questionIds.add(rs.getInt("id"));
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            Collections.shuffle(questionIds);
            questionIds = questionIds.subList(0, 3);
            session.setAttribute("questionIds", questionIds);
        }
        int currentQuestionId = (int)session.getAttribute("questionIds").get(questionNo);
        try {
            stmt = con.prepareStatement("SELECT * FROM questions WHERE id=?");
            stmt.setInt(1, currentQuestionId);
            rs = stmt.executeQuery();
            if (rs.next()) {
                request.setAttribute("question", rs.getString("question"));
                request.setAttribute("option1", rs.getString("option1"));
                request.setAttribute("option2", rs.getString("option2"));
                request.setAttribute("option3", rs.getString("option3"));
                request.setAttribute("option4", rs.getString("option4"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        session.setAttribute("questionNo", questionNo);
        RequestDispatcher rd = request.getRequestDispatcher("exam.jsp");
        rd.forward(request, response);
    }

    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession();
        int questionNo = (int)session.getAttribute("questionNo");
        String answer = request.getParameter("answer");
        int currentQuestionId = (int)session.getAttribute("questionIds").get(questionNo);
        int score = (int)session.getAttribute("score");
        try {
            stmt = con.prepareStatement("SELECT answer FROM questions WHERE id=?");
            stmt.setInt(1, currentQuestionId);
            rs = stmt.executeQuery();
            if (rs.next()) {
                String correctAnswer = rs.getString("answer");
                if (answer.equals(correctAnswer)) {
                    score++;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        questionNo++;
        session.setAttribute("score", score);
        session.setAttribute("questionNo", questionNo);
        if (questionNo >= 3) {
            session.setAttribute("examStatus", "complete");
            try {
                stmt = con.prepareStatement("INSERT INTO scores (score) VALUES (?)");
                stmt.setInt(1, score);
                stmt.executeUpdate();
            } catch (SQLException e) {
                e.printStackTrace();
            }
            RequestDispatcher rd = request.getRequestDispatcher("result.jsp");
            rd.forward(request, response);
        } else {
            response.sendRedirect("exam");
        }
    }

    public void destroy() {
        try {
            if (rs != null) rs.close();
           

















<!DOCTYPE html>
<html>
<head>
	<title>EMI Calculator</title>
	<style>
		input[type="text"] {
			padding: 5px;
			margin: 10px;
			border: 1px solid #ccc;
			border-radius: 3px;
		}
		button {
			padding: 5px 10px;
			background-color: #4CAF50;
			color: #fff;
			border: none;
			border-radius: 3px;
			cursor: pointer;
		}
		#result {
			padding: 10px;
			margin: 10px;
			border: 1px solid #ccc;
			border-radius: 3px;
			font-size: 18px;
			font-weight: bold;
		}
	</style>
</head>
<body>
	<h1>EMI Calculator</h1>
	<label for="loan-type">Select Loan Type:</label>
	<select id="loan-type">
		<option value="home">Home Loan</option>
		<option value="car">Car Loan</option>
		<option value="personal">Personal Loan</option>
	</select>
	<br><br>
	<label for="loan-amount">Loan Amount:</label>
	<input type="text" id="loan-amount">
	<br>
	<label for="interest-rate">Interest Rate:</label>
	<input type="text" id="interest-rate">
	<br>
	<label for="loan-tenure">Loan Tenure (in months):</label>
	<input type="text" id="loan-tenure">
	<br><br>
	<button id="calculate">Calculate EMI</button>
	<div id="result"></div>
	<script>
		function calculateEMI(principal, interest, months) {
			// Convert interest rate from percentage to decimal
			interest = interest / 100 / 12;
  // Calculate monthly payment
		let x = Math.pow(1 + interest, months);
		let monthlyPayment = (principal * x * interest) / (x - 1);

		// Round to 2 decimal places
		monthlyPayment = monthlyPayment.toFixed(2);

		return monthlyPayment;
	}

	document.getElementById("calculate").addEventListener("click", function() {
		let principal = parseFloat(document.getElementById("loan-amount").value);
		let interest = parseFloat(document.getElementById("interest-rate").value);
		let months = parseFloat(document.getElementById("loan-tenure").value);

		let monthlyPayment = calculateEMI(principal, interest, months);

		document.getElementById("result").innerHTML = "EMI: " + monthlyPayment;
	});
</script

import java.util.*;

class Person {
    private String name;
    private int age;

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    public String toString() {
        return name + " (" + age + ")";
    }

    public static void main(String[] args) {
        List<Person> people = new ArrayList<>();
        people.add(new Person("Alice", 25));
        people.add(new Person("Bob", 30));
        people.add(new Person("Charlie", 20));
        people.add(new Person("David", 35));
        people.add(new Person("Emily", 28));

        // Sort by age using a comparator
        Collections.sort(people, Comparator.comparingInt(Person::getAge));

        System.out.println("Sorted by age:");
        for (Person p : people) {
            System.out.println(p);
        }

        // Sort by name using a comparator
        Collections.sort(people, Comparator.comparing(Person::getName));

        System.out.println("Sorted by name:");
        for (Person p : people) {
            System.out.println(p);
        }
    }
}

class PersonToStringConstructor {
    private String name;
    private int age;

    public PersonToStringConstructor(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public String toString() {
        return name + " (" + age + ")";
    }
}


