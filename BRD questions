import java.util.*;

public class Main {
    public static void main(String[] args) {
        List<String> names = new ArrayList<>(Arrays.asList("Harsh", "Ranjan", "Harsh"));
        List<String> newNames = new ArrayList<>();
        for (String name : names) {
            if (!newNames.contains(name)) {
                newNames.add(name);
            }
        }
        names = newNames;
        System.out.println(names);  // Output: [Harsh, Ranjan]
    }
}




for (String line; (line = br.readLine()) != null; ) {
                    empsData.add(line);
                }





package service;

import exception.DetailsNotAvailableException;
import model.Employee;

import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Properties;

public class Service {

    private Service() {
    }
    public static Properties getProperties(String fileName) throws IOException {
        FileInputStream fis = null;
        Properties prop = null;
        try {
            fis = new FileInputStream(fileName);
            prop = new Properties();
            prop.load(fis);
        } catch (IOException ioe) {
            ioe.printStackTrace();
        } finally {
            fis.close();
        }
        return prop;
    }

    public static void readDataFromFileAndReturnEmployee(String name) {
        List<String> empsData = new ArrayList<>();
        List<Employee> employees = new ArrayList<>();
        Employee emp = new Employee();

        try {
            Properties properties = getProperties("D:\\OneDrive\\OneDrive - nucleusonline\\java assignment\\JavaCodingTest\\src\\main\\resources\\fileName.properties");
            File f = new File((String) properties.get(name));
            System.out.println(f.exists());

            try (BufferedReader br = new BufferedReader(new FileReader(f))) {
                for (String line; (line = br.readLine()) != null; ) {
                    empsData.add(line);
                }
            } catch (NullPointerException npe) {
                throw new DetailsNotAvailableException("File Not Found");
            }
        } catch (IOException ex) {
            throw new DetailsNotAvailableException("File Not Found");
        }
        emp.setEmpName(empsData.get(0));
        emp.setEmail(empsData.get(1));
        emp.setQualification(empsData.get(2));
        emp.setYearsOfExperience(Double.parseDouble(empsData.get(3)));
        emp.setDateOfBirth(empsData.get(4));
        employees.add(setDesignation(emp));
        storeDetailsOfEmployees(employees);
        serializeToStore(employees);
    }

    public static Employee setDesignation(Employee emp) {

        double yoe = emp.getYearsOfExperience();
        String empQual = emp.getQualification();
        if (yoe > 0.0 && yoe <= 1.0 && empQual.equals("B.tech")) {
            emp.setDesignation("ASE");
        } else if (yoe > 3.0 && yoe <= 5.0 && empQual.equals("MCA")) {
            emp.setDesignation("TL");
        } else if (yoe > 5.0 && (empQual.equals("MCA") || empQual.equals("B.tech"))) {
            emp.setDesignation("Project Manager");
        } else if (yoe > 1.0 && yoe <= 3.0 && (empQual.equals("B.tech") || empQual.equals("MCA"))) {
            emp.setDesignation("SE");
        }
        return emp;
    }

    public static void storeDetailsOfEmployees(List<Employee> employees) {
        StringBuilder str = new StringBuilder();

        try (FileWriter fw = new FileWriter("D:\\OneDrive\\OneDrive - nucleusonline\\java assignment\\JavaCodingTest\\src\\main\\java\\files\\detailsOfEmployee.txt")) {
            for (Employee employee : employees) {
                str.append("Name : ").append(employee.getEmpName()).append("\n");
                str.append("DOB : ").append(employee.getDateOfBirth()).append("\n");
                str.append("Email : ").append(employee.getEmail()).append("\n");
                str.append("Qualification : ").append(employee.getQualification()).append("\n");
                str.append("Designation : ").append(employee.getDesignation()).append("\n");
                str.append("YOE : ").append(employee.getYearsOfExperience()).append("\n");
                try {
                    Objects.requireNonNull(fw).append(String.valueOf(str));
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    public static void serializeToStore(List<Employee> employees) {
        try (FileOutputStream fileOutputStream = new FileOutputStream("D:\\OneDrive\\OneDrive - nucleusonline\\java assignment\\JavaCodingTest\\src\\main\\java\\files\\details.txt");
                ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream)) {

            for (Employee employee : employees) {
                objectOutputStream.writeObject(employee);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}




package service;

import exception.DetailsNotAvailableException;
import model.Employee;

import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

public class Service {

    public static Properties getProperties(String fileName) throws IOException {
        Properties prop = new Properties();
        try (FileInputStream fis = new FileInputStream(fileName)) {
            prop.load(fis);
        }
        return prop;
    }

    public static void readDataFromFileAndReturnEmployee(String name) {
        List<Employee> employees = new ArrayList<>();

        try {
            Properties properties = getProperties("fileName.properties");
            File file = new File(properties.getProperty(name));
            if (!file.exists()) {
                throw new DetailsNotAvailableException("File Not Found");
            }
            try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
                String empName = reader.readLine();
                String email = reader.readLine();
                String qualification = reader.readLine();
                double yearsOfExperience = Double.parseDouble(reader.readLine());
                String dateOfBirth = reader.readLine();
                Employee emp = new Employee(empName, email, qualification, yearsOfExperience, dateOfBirth);
                employees.add(setDesignation(emp));
            }
        } catch (IOException ex) {
            throw new DetailsNotAvailableException("File Not Found");
        }
        storeDetailsOfEmployees(employees);
        serializeToStore(employees);
    }

    public static Employee setDesignation(Employee emp) {
        double yoe = emp.getYearsOfExperience();
        String empQual = emp.getQualification();
        if (yoe > 0.0 && yoe <= 1.0 && empQual.equals("B.tech")) {
            emp.setDesignation("ASE");
        } else if (yoe > 3.0 && yoe <= 5.0 && empQual.equals("MCA")) {
            emp.setDesignation("TL");
        } else if (yoe > 5.0 && (empQual.equals("MCA") || empQual.equals("B.tech"))) {
            emp.setDesignation("Project Manager");
        } else if (yoe > 1.0 && yoe <= 3.0 && (empQual.equals("B.tech") || empQual.equals("MCA"))) {
            emp.setDesignation("SE");
        }
        return emp;
    }

    public static void storeDetailsOfEmployees(List<Employee> employees) {
        try (PrintWriter writer = new PrintWriter(new FileWriter("detailsOfEmployee.txt"))) {
            for (Employee employee : employees) {
                writer.println("Name : " + employee.getEmpName());
                writer.println("DOB : " + employee.getDateOfBirth());
                writer.println("Email : " + employee.getEmail());
                writer.println("Qualification : " + employee.getQualification());
                writer.println("Designation : " + employee.getDesignation());
                writer.println("YOE : " + employee.getYearsOfExperience());
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void serializeToStore(List<Employee> employees) {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("details.txt"))) {
            for (Employee employee : employees) {
                oos.writeObject(employee);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}





import java.util.ArrayList;
import java.util.Collections;

public class Customer {
    private String name;
    private int age;
    private String address;

    public Customer(String name, int age, String address) {
        this.name = name;
        this.age = age;
        this.address = address;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    public String getAddress() {
        return address;
    }

    public static void main(String[] args) {
        // create a new customer
        Customer newCustomer = new Customer("John Smith", 25, "123 Main St.");

        // add the customer to the table
        ArrayList<Customer> customerTable = new ArrayList<>();
        customerTable.add(newCustomer);

        // sort the table by age
        Collections.sort(customerTable, (c1, c2) -> c1.getAge() - c2.getAge());

        // print the sorted table
        for (Customer customer : customerTable) {
            System.out.println(customer.getName() + ", " + customer.getAge() + ", " + customer.getAddress());
        }

        // remove customers older than 23
        customerTable.removeIf(customer -> customer.getAge() > 23);
    }
}



