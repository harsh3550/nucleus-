Develop a Spring Core Application to perform the following actions on the Customer object.
a. boolean registerCustomer(Customer c)
The condition to register a customeris that the age of the customer must be greater 
than 21. 
b. boolean updateCustomer(Customer c)
c. boolean deleteCustomer(int customerId)
d. Customer getCustomer(int customerId)throws CustomerNotFoundException
By giving the Customer Id, the customer is searched in database. If found returns the 
object otherwise returns CustomerNotFoundException
e. List<Customer> getAllCustomers()
f. List<Customer> getCustomersByName(String custName)


Important Points:
1. The user input will be accepted in the Presentation Layer, and all the methods mentioned 
above are present in Service Layer. 
2. Use the Customer table already existing in the database created during SQL-Day1. The 
application must be properly layered with the Presentation layer, Service layer and the 
database layer. Use JDBC to connect with Database. 
3. Use Java Configuration and ComponentScan, Autowired, Component, Service, Repository
annotations to complete the application



Spring Core Customer Management.


Harsh Ranjan
Develop a Spring Core Application to perform the following actions on the Customer object.
a. boolean registerCustomer(Customer c)
The condition to register a customeris that the age of the customer must be greater 
than 21. 
b. boolean updateCustomer(Customer c)
c. boolean deleteCustomer(int customerId)
d. Customer getCustomer(int customerId)throws CustomerNotFoundException
By giving the Customer Id, the customer is searched in database. If found returns the 
object otherwise returns CustomerNotFoundException
e. List<Customer> getAllCustomers()
f. List<Customer> getCustomersByName(String custName)


Important Points:
1. The user input will be accepted in the Presentation Layer, and all the methods mentioned 
above are present in Service Layer. 
2. Use the Customer table already existing in the database created during SQL-Day1. The 
application must be properly layered with the Presentation layer, Service layer and the 
database layer. Use JDBC to connect with Database. 
3. Use Java Configuration and ComponentScan, Autowired, Component, Service, Repository
annotations to complete the application




To develop a Spring Core Application to perform the above mentioned actions on the Customer object, we need to follow the following steps:

Step 1: Create a database named "customerdb" and create a table named "Customer" in it, with the following columns:

id (int, primary key, auto increment)
name (varchar)
age (int)
Step 2: Add the required dependencies in the pom.xml file. Here are the dependencies required for this application:

spring-core
spring-context
spring-jdbc
mysql-connector-java
Step 3: Create a Customer model class with the following properties:

id (int)
name (String)
age (int)
Step 4: Create an interface named CustomerDAO with the following methods:

boolean registerCustomer(Customer c)
boolean updateCustomer(Customer c)
boolean deleteCustomer(int customerId)
Customer getCustomer(int customerId) throws CustomerNotFoundException
List<Customer> getAllCustomers()
List<Customer> getCustomersByName(String custName)
Step 5: Create a class named CustomerDAOImpl that implements the CustomerDAO interface. Here, we will use JDBC to connect with the database and perform database operations.

Step 6: Create a Service layer with the name CustomerService with the following methods:

boolean registerCustomer(Customer c)
boolean updateCustomer(Customer c)
boolean deleteCustomer(int customerId)
Customer getCustomer(int customerId) throws CustomerNotFoundException
List<Customer> getAllCustomers()
List<Customer> getCustomersByName(String custName)
Step 7: Create a class named CustomerServiceImpl that implements the CustomerService interface. Here, we will use the CustomerDAO object to perform the required database operations.

Step 8: Create a Presentation layer with the name CustomerController with the following methods:

void registerCustomer()
void updateCustomer()
void deleteCustomer()
void getCustomer()
void getAllCustomers()
void getCustomersByName()
Step 9: Create a class named CustomerControllerImpl that implements the CustomerController interface. Here, we will use the CustomerService object to perform the required operations.

Step 10: Use Java Configuration and ComponentScan, Autowired, Component, Service, Repository annotations to complete the application.

Here is the sample code for the above-mentioned steps:



























package assignment16;

import java.io.*;

public class CreateFile {
        public static void main(String[] args) throws IOException {
            File file = new File("D:\\OneDrive\\OneDrive - nucleusonline\\java assignment\\harsh.txt");
            file.createNewFile();
            FileWriter writer = new FileWriter(file);
            writer.write("Hi this is Harsh");
            writer.flush();
            writer.close();
            try{
                FileOutputStream fout=new
                        FileOutputStream("D:\\OneDrive\\OneDrive - nucleusonline\\java assignment\\harsh.txt", true);
                String s ="\nHow are you people";
                byte b[]=s.getBytes();
                fout.write(b);
                fout.close();
                System.out.println("File OverWritten");
            }catch(Exception e){
                System.out.println(e);
            }
        }
    }






import java.io.*;

public class ModifyFile {
    public static void main(String[] args) {
        try {
            FileWriter writer = new FileWriter("D:\\OneDrive\\OneDrive - nucleusonline\\java assignment\\harsh.txt", true);
            writer.write("\nThis is a modified content.");
            writer.close();
            System.out.println("File modified successfully!");
        } catch (IOException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }
    }
}







import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class CharacterCounter {
    public static void main(String[] args) {
        if (args.length < 2) {
            System.out.println("Usage: java CharacterCounter <file_path> <character>");
            return;
        }
        
        String filePath = args[0];
        char characterToCount = args[1].charAt(0);
        int count = 0;
        
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            int c;
            while ((c = reader.read()) != -1) {
                if (c == characterToCount) {
                    count++;
                }
            }
        } catch (IOException e) {
            System.out.println("Error reading file: " + e.getMessage());
            return;
        }
        
        System.out.println("The character '" + characterToCount + "' appears " + count + " times in the file.");
    }
}




Exam Session Management.


Harsh Ranjan
2. A table contains 10 MCQ questions. When user takes exam, 3 questions are randomly picked from the table and displayed. Maximum of 3 mins is given for the exam. Each question is displayed in a separate page. The user can use next and prev buttons to navigate. The first question page should not have prev button and last question page should not have next button. There should be a finish button in every question page When user clicks on the finish button or if the time is beyond 3 mins, the result page with marks must be displayed.

If user accidently closes the browser, then he must be able to resume the exam. To provide this facility, whenever any attribute is added or updated in the session, it must be added to the database too. Similarly whenever it is removed, it must be removed. Apart from that status of the exam must also be maintained.

On requesting for exam page, if the exam status is incomplete, then the last question that user attempted must be shown. User must be able to resume seamlessly.

To implement the above functionality, we can follow the following steps:

Create a database table to store the exam questions and their answers. The table should have the following columns: question_id, question_text, option_1, option_2, option_3, option_4, correct_answer.

Create a user table to store user information like user_id, name, email, and password.

Create a session table to store session information like session_id, user_id, exam_status, current_question_id, and timestamp.

When the user logs in, start a new session and store the session_id in a cookie. If the user has an existing session, retrieve the session data from the session table.

On the exam page, retrieve the current session data from the session table using the session_id stored in the cookie.

If the exam status is incomplete, retrieve the last question attempted by the user from the session data and display it on the current page. Otherwise, select 3 random questions from the question table and display them on the current page.

For each question, display the question text and its options in a separate page. The first question page should not have a prev button and the last question page should not have a next button.

When the user clicks the next button, store the user's answer for the current question in the session data and update the current_question_id in the session table.

When the user clicks the finish button or if the time is beyond 3 mins, calculate the user's score by comparing the user's answers in the session data with the correct answers in the question table. Store the score and exam status as "complete" in the session data and update the session table.

If the user accidentally closes the browser, retrieve the session data from the session table using the session_id stored in the cookie and resume the exam from where the user left off.

Whenever any attribute is added or updated in the session data, update the session table accordingly. Similarly, when any attribute is removed from the session data, remove it from the session table.

Finally, display the user's score on the result page along with the correct answers to the questions attempted by the user.







import java.io.*;
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;
import java.sql.*;

public class ExamServlet extends HttpServlet {

    private Connection con;
    private PreparedStatement stmt;
    private ResultSet rs;

    public void init() throws ServletException {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/test", "root", "password");
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession();
        String examStatus = (String)session.getAttribute("examStatus");
        int questionNo = 0;
        if (examStatus != null && examStatus.equals("incomplete")) {
            questionNo = (int)session.getAttribute("questionNo");
        } else {
            Random rand = new Random();
            List<Integer> questionIds = new ArrayList<>();
            try {
                stmt = con.prepareStatement("SELECT id FROM questions");
                rs = stmt.executeQuery();
                while (rs.next()) {
                    questionIds.add(rs.getInt("id"));
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            Collections.shuffle(questionIds);
            questionIds = questionIds.subList(0, 3);
            session.setAttribute("questionIds", questionIds);
        }
        int currentQuestionId = (int)session.getAttribute("questionIds").get(questionNo);
        try {
            stmt = con.prepareStatement("SELECT * FROM questions WHERE id=?");
            stmt.setInt(1, currentQuestionId);
            rs = stmt.executeQuery();
            if (rs.next()) {
                request.setAttribute("question", rs.getString("question"));
                request.setAttribute("option1", rs.getString("option1"));
                request.setAttribute("option2", rs.getString("option2"));
                request.setAttribute("option3", rs.getString("option3"));
                request.setAttribute("option4", rs.getString("option4"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        session.setAttribute("questionNo", questionNo);
        RequestDispatcher rd = request.getRequestDispatcher("exam.jsp");
        rd.forward(request, response);
    }

    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession();
        int questionNo = (int)session.getAttribute("questionNo");
        String answer = request.getParameter("answer");
        int currentQuestionId = (int)session.getAttribute("questionIds").get(questionNo);
        int score = (int)session.getAttribute("score");
        try {
            stmt = con.prepareStatement("SELECT answer FROM questions WHERE id=?");
            stmt.setInt(1, currentQuestionId);
            rs = stmt.executeQuery();
            if (rs.next()) {
                String correctAnswer = rs.getString("answer");
                if (answer.equals(correctAnswer)) {
                    score++;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        questionNo++;
        session.setAttribute("score", score);
        session.setAttribute("questionNo", questionNo);
        if (questionNo >= 3) {
            session.setAttribute("examStatus", "complete");
            try {
                stmt = con.prepareStatement("INSERT INTO scores (score) VALUES (?)");
                stmt.setInt(1, score);
                stmt.executeUpdate();
            } catch (SQLException e) {
                e.printStackTrace();
            }
            RequestDispatcher rd = request.getRequestDispatcher("result.jsp");
            rd.forward(request, response);
        } else {
            response.sendRedirect("exam");
        }
    }

    public void destroy() {
        try {
            if (rs != null) rs.close();
           

















<!DOCTYPE html>
<html>
<head>
	<title>EMI Calculator</title>
	<style>
		input[type="text"] {
			padding: 5px;
			margin: 10px;
			border: 1px solid #ccc;
			border-radius: 3px;
		}
		button {
			padding: 5px 10px;
			background-color: #4CAF50;
			color: #fff;
			border: none;
			border-radius: 3px;
			cursor: pointer;
		}
		#result {
			padding: 10px;
			margin: 10px;
			border: 1px solid #ccc;
			border-radius: 3px;
			font-size: 18px;
			font-weight: bold;
		}
	</style>
</head>
<body>
	<h1>EMI Calculator</h1>
	<label for="loan-type">Select Loan Type:</label>
	<select id="loan-type">
		<option value="home">Home Loan</option>
		<option value="car">Car Loan</option>
		<option value="personal">Personal Loan</option>
	</select>
	<br><br>
	<label for="loan-amount">Loan Amount:</label>
	<input type="text" id="loan-amount">
	<br>
	<label for="interest-rate">Interest Rate:</label>
	<input type="text" id="interest-rate">
	<br>
	<label for="loan-tenure">Loan Tenure (in months):</label>
	<input type="text" id="loan-tenure">
	<br><br>
	<button id="calculate">Calculate EMI</button>
	<div id="result"></div>
	<script>
		function calculateEMI(principal, interest, months) {
			// Convert interest rate from percentage to decimal
			interest = interest / 100 / 12;
  // Calculate monthly payment
		let x = Math.pow(1 + interest, months);
		let monthlyPayment = (principal * x * interest) / (x - 1);

		// Round to 2 decimal places
		monthlyPayment = monthlyPayment.toFixed(2);

		return monthlyPayment;
	}

	document.getElementById("calculate").addEventListener("click", function() {
		let principal = parseFloat(document.getElementById("loan-amount").value);
		let interest = parseFloat(document.getElementById("interest-rate").value);
		let months = parseFloat(document.getElementById("loan-tenure").value);

		let monthlyPayment = calculateEMI(principal, interest, months);

		document.getElementById("result").innerHTML = "EMI: " + monthlyPayment;
	});
</script>


